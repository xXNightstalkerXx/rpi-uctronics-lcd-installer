#! /bin/bash

#General Directory Declarations
START_DIR=$PWD
INSTALL_DIR=/etc/uctronics
UC_INSTALLER_DIR=/etc/uctronics/uctronics-lcd-installer
UC_REPO_DIR=/etc/uctronics/SKU_RM0004
UC_BAK_DIR=/etc/uctronics/backup
SCRIPTS_DIR=/usr/bin
CONFIG=/boot/config.txt
CONFIG_BAK=/etc/uctronics/backup/config.txt.bak
MODULES=/etc/modules
MODULES_BAK=/etc/uctronics/backup/modules.bak
UNINSTALL=/usr/bin/uctronics-lcd-uninstaller
UNINSTALL_BAK=/etc/uctronics/uctronics-lcd-installer/uctronics-lcd-uninstaller
STARTUP=/usr/bin/uctronics-lcd-startup
STARTUP_BAK=/etc/uctronics/uctronics-lcd-installer/uctronics-lcd-startup
TEMP_DIR=/tmp/backup

#URL Declarations
UC_GIT_URL=https://github.com/UCTRONICS/SKU_RM0004.git
INSTALLER_GIT_URL=https://github.com/xXNightstalkerXx/uctronics-lcd-installer.git
INSTALLER_WGET_URL=https://raw.github.com/xXNightstalkerXx/uctronics-lcd-installer/master/uctronics-lcd-installer

#I2C Interface Setting
I2C_SETTING=off

#Crontab Input
CRON="@reboot ${STARTUP}"

#Color Declarations
std=`tput setaf 15`
red=`tput setaf 9 bold`
green=`tput setaf 10 bold`
yellow=`tput setaf 11 bold`
pink=`tput setaf 57`
blue=`tput setaf 27 bold`

#Main Script
echo ""
echo ""
echo "${blue}      ////////////  ////////////  //////   ////////////  ////////////${std}"
echo "${blue}     //                 //       //   //       //       //          ${std}"
echo "${blue}    //                 //       //    //      //       //          ${std}"
echo "${blue}   ////////////       //       /////////     //       ////////////${std}"
echo "${blue}            //       //       //      //    //                 //${std}"
echo "${blue}           //       //       //       //   //                 //${std}"
echo "${blue}////////////       //       //        //  //       ////////////${std}"
echo "UCTronics Status LCD Uninstaller by Nightstalker"
echo ""
echo ""
echo "${blue}Checking OS...${std}"
os_type="$(grep -E '^(NAME)=' /etc/os-release)"
os_type=${os_type#*=}

if [[ "$os_type" == *"Kali"* ]]
then
	INSTALL_OPTIONS=1
	echo ""
	echo "$os_type"
elif [[ "$os_type" == *"Raspbian"* ]]
then
	if [[ $(cat /boot/issue.txt) == *"stage2"* ]]
	then
		INSTALL_OPTIONS=2
		echo ""
		echo "$os_type"
		echo " Lite Version"
	elif [[ $(cat /boot/issue.txt) == *"stage4"* ]]
	then
		INSTALL_OPTIONS=3
		echo ""
		echo "$os_type"
		echo " GUI Lite Version"
	elif [[ $(cat /boot/issue.txt) == *"stage5"* ]]
	then
		INSTALL_OPTIONS=3
		echo ""
		echo "$os_type"
		echo " GUI Full Version"
	else
		INSTALL_OPTIONS=2
		echo ""
		echo "$os_type"
		echo " Unknown Raspbian"
		echo " Using Lite Version Uninstall Options!"
	fi
else
	echo ""
	echo "${red}Wrong Operating System detected! Aborting the Installation!${std}"
	sleep 1
	exit 1
fi

if [[ $INSTALL_OPTIONS -eq 1 ]]
then
	#OS Specific Directory Declarations
	BLACKLIST=/etc/modprobe.d/kalipi-blacklist.conf
elif [[ $INSTALL_OPTIONS -eq 2 ]]
then
	#OS Specific Directory Declarations
	BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
	RC_LOCAL=/etc/rc.local
	RC_LOCAL_BAK=/etc/uctronics/backup/rc.local.bak
	
elif [[ $INSTALL_OPTIONS -eq 3 ]]
then
	#OS Specific Directory Declarations
	BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
	RC_LOCAL=/etc/rc.local
	RC_LOCAL_BAK=/etc/uctronics/backup/rc.local.bak
fi

echo ""
echo "${blue}Operating System okay! Continuing to Uninstall!${std}"
sleep 1

if [[ $INSTALL_OPTIONS -eq 1 ]]
then
	echo ""
	echo ""
	echo "${blue}Reverting Changes for automatic startup...${std}"
	echo ""
	echo "${blue}Deleting lines in Crontab...${std}"
	(sudo crontab -u root -l | grep -v "$CRON" ) | sudo crontab -u root -
	echo ""
	echo "${blue}Disabled the Startup Script! Continuing to Uninstall!${std}"
	sleep 1
else
	echo ""
	echo ""
	echo "${blue}Reverting Changes for automatic startup...${std}"
	echo ""
	echo "${blue}Deleting lines in ${RC_LOCAL} ...${std}"
	grep -v "./uctronics-lcd-startup &" $RC_LOCAL | sudo tee $RC_LOCAL
	echo ""
	echo "${blue}Disabled the Startup Script! Continuing to Uninstall!${std}"
	sleep 1
fi

echo ""
echo ""
echo "${blue}Switching ${I2C_SETTING} the I2C Interface ...${std}"
echo ""
echo "${blue}Changing the I2C dtparam in the ${CONFIG} to ${I2C_SETTING} and deleting baudrate settings...${std}"
echo "dtparam=i2c_arm=${I2C_SETTING}"
sudo sed -i "s/^dtparam=i2c_arm=.*/dtparam=i2c_arm=${I2C_SETTING}/" $CONFIG
echo "${blue}Switching the I2C dtparam to ${I2C_SETTING} ...${std}"
sudo dtparam i2c_arm=$I2C_SETTING
echo "${blue}Modprobing the I2C Interface...${std}"
modprobe i2c-dev
echo ""
echo "${blue}I2C Interface disabled! Continuing to Uninstall!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Disabling ON/OFF Switch support...${std}"
echo ""
echo "${blue}Deleting line at ${CONFIG} ...${std}"
echo "dtoverlay=gpio-shutdown,gpio_pin=4,active_low=1,gpio_pull=up" 
grep -v "dtoverlay=gpio-shutdown,gpio_pin=4,active_low=1,gpio_pull=up" $CONFIG | sudo tee $CONFIG
echo ""
echo "${blue}ON/OFF Switch support disabled! Continuing to Uninstall!${std}"
sleep 1

if [[ $INSTALL_OPTIONS -eq 1 ]]
then
	echo ""
	echo ""
	echo "${green}A Backup of ${CONFIG} and ${MODULES} was created during Installation.${std}"
	echo "${green}Do you want to recover, safe or delete it?${std}"
	echo ""
	echo "1. Recover the Backup"
	echo "2. Safe the Backup"
	echo "3. Delete the Backup"

	echo ""
	read -p "${green}Enter a Number for an Option: ${std}" n

	while [[ $n -lt 1 || $n -gt 3 ]]
	do
        echo ""
        echo "${red}Wrong Input! Please Select a Number for an Option!${std}"
        read -p "Enter a Number for an Option: " n;
	done
	
	if [[ $n -eq 1 ]]
	then
		echo ""
		echo ""
		echo "${blue}You selected to recover the Backups ${CONFIG_BAK} and ${MODULES} !${std}"
		echo "${blue}Deleting current ${CONFIG} and ${MODULES} and moving the Backups from ${std}"
		echo "${blue}${CONFIG_BAK} and ${MODULES_BAK} there instead...${std}"
		sudo mv $CONFIG_BAK $CONFIG
		echo ""
		echo "${blue}Backup recovered! Continuing to Uninstall!${std}"
		sleep 1
	elif [[ $n -eq 2 ]]
	then
		echo ""
		echo ""
		echo "${green}You selected to safe the Backup ${CONFIG_BAK}!${std}"
		echo "${green}Please enter the full path to a Directory where to safe it!${std}"
		echo "${green}If the Directory doesn't exist the Backup will be safed at ${TEMP_DIR}!${std}"
		echo ""
		read -p "${green}Enter full path to a Directory where to safe it: ${std}" n

		if [ -d "$n" ]
		then
			echo ""
			echo "${blue}Directory exists! Moving the Backup file there...${std}"
			n=$n"/config.txt"
			sudo mv $CONFIG_BAK $n
			echo ""
			echo "${blue}Backup is safed at ${n}! Continuing to Uninstall!${std}"
			sleep 1
		else
			echo "${red}Directory doesn't exist! Moving the Backup file to ${TEMP_DIR} ...${std}"
			sudo mkdir -p $TEMP_DIR
			n=$TEMP_DIR"/config.txt"
			sudo mv $CONFIG_BAK $n
			echo ""
			echo "${blue}Backup is safed at ${n}! Continuing to Uninstall!${std}"
			sleep 1
		fi
	elif [[ $n -eq 3 ]]
	then
		echo ""
		echo ""
		echo "${blue}You selected to delete the Backup ${CONFIG_BAK}!${std}"
		echo ""
		echo "${blue}Backup will be deleted in the Uninstall process! Continuing to Uninstall!${std}"
		sleep 1
	fi
else
	echo ""
	echo ""
	echo "${green}Backups of ${CONFIG} and ${RC_LOCAL} were created during Installation.${std}"
	echo "${green}Do you want to recover, safe or delete them?${std}"
	echo ""
	echo "1. Recover the Backups"
	echo "2. Safe the Backups"
	echo "3. Delete the Backups"

	echo ""
	read -p "${green}Enter a Number for an Option: ${std}" n

	while [[ $n -lt 1 || $n -gt 3 ]]
	do
        echo ""
        echo "${red}Wrong Input! Please Select a Number for an Option!${std}"
        read -p "Enter a Number for an Option: " n;
	done
	
	if [[ $n -eq 1 ]]
	then
		echo ""
		echo ""
		echo "${blue}You selected to recover the Backups ${CONFIG_BAK} and ${RC_LOCAL_BAK}!${std}"
		echo "${blue}Deleting current ${CONFIG} and moving the Backup from ${CONFIG_BAK} there instead...${std}"
		sudo mv $CONFIG_BAK $CONFIG
		echo "${blue}Deleting current ${RC_LOCAL} and moving the Backup from ${RC_LOCAL_BAK} there instead...${std}"
		sudo mv $RC_LOCAL_BAK $RC_LOCAL
		echo ""
		echo "${blue}Backups recovered! Continuing to Uninstall!${std}"
		sleep 1
	elif [[ $n -eq 2 ]]
	then
		echo ""
		echo ""
		echo "${green}You selected to safe the Backups ${CONFIG_BAK} and ${RC_LOCAL_BAK}!${std}"
		echo "${green}Please enter the full path to a Directory where to safe them!${std}"
		echo "${green}If the Directory doesn't exist the Backups will be safed at ${TEMP_DIR}!${std}"
		echo ""
		read -p "${green}Enter full path to a Directory where to safe it: ${std}" n

		if [ -d "$n" ]
		then
			echo ""
			echo "${blue}Directory exists! Moving the Backup files there...${std}"
			config_temp=$n"/config.txt"
			rc_local_temp=$n"/rc.local"
			sudo mv $CONFIG_BAK $config_temp
			sudo mv $RC_LOCAL_BAK $rc_local_temp
			echo ""
			echo "${blue}Backups are safed at ${n}! Continuing to Uninstall!${std}"
			sleep 1
		else
			echo "${red}Directory doesn't exist! Moving the Backup files to ${TEMP_DIR} ...${std}"
			sudo mkdir -p $TEMP_DIR
			config_temp=$TEMP_DIR"/config.txt"
			rc_local_temp=$TEMP_DIR"/rc.local"
			sudo mv $CONFIG_BAK $config_temp
			sudo mv $RC_LOCAL_BAK $rc_local_temp
			echo ""
			echo "${blue}Backups are safed at $TEMP_DIR! Continuing to Uninstall!${std}"
			sleep 1
		fi
	elif [[ $n -eq 3 ]]
	then
		echo ""
		echo ""
		echo "${blue}You selected to delete the Backups ${CONFIG_BAK} and ${RC_LOCAL_BAK}!${std}"
		echo ""
		echo "${blue}Backups will be deleted in the Uninstall process! Continuing to Uninstall!${std}"
		sleep 1
	fi
fi

echo ""
echo ""
echo "${blue}Checking Directories...${std}"
echo ""
echo "${blue}Checking Installation Directory...${std}"
echo "$INSTALL_DIR"
if [ -d "$INSTALL_DIR" ]
then
    echo "${blue}Installation Directory exists. Deleting this Directory!${std}"
    sudo rm -d -r $INSTALL_DIR
else
    echo "${red}Installation Directory doesn't exist. Not able to delete!${std}"
fi
echo ""
echo "${blue}Directories sucessfully deleted! Continuing to Uninstall!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Deleting Script Files in ${SCRIPTS_DIR} Directory...${std}"
echo ""
echo "${blue}Switching into Directory...${std}"
echo "$SCRIPTS_DIR"
cd $SCRIPTS_DIR
echo "${blue}Deleting uctronics-lcd-startup...${std}"
sudo rm $STARTUP
echo ""
echo "${blue}Script Files removed from the System! Purging myself now!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Uninstall completed, Good bye!${std}"
echo ""
sudo rm $UNINSTALL
